version: '3.7'

networks:
  kong-net:
    name: kong-net
    driver: bridge

volumes:
  kong_data: {}

services:
  # app:
  #   image: wesleywillians/kong-service:latest
  #   environment:
  #     PORT: ":8081"
  #     CONTENT: "<h1>Bem vindo a Servidor</h1>"
  #   networks:
  #     - kong-net
  #   ports:
  #     - 8081:8081

  adminer:
    image: adminer
    restart: always
    networks:
      - kong-net
    ports:
      - 9000:8080
      
  db:
    image: postgres:9.6
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    networks:
      - kong-net
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    # volumes:
    #   - kong_data:/var/lib/postgresql/data

  kong-migrations:
    image: "kong"
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  # kong-migrations-up:
  #   image: "kong"
  #   command: kong migrations up && kong migrations finish
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_DATABASE: kong
  #     KONG_PG_HOST: db
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: kong
  #   networks:
  #     - kong-net
  #   restart: on-failure
  #   deploy:
  #     restart_policy:
  #       condition: on-failure

  kong:
    image: "kong"
    user: "kong"
    environment:
      # KONG_SSL_CERT: /certificado-ipp/gitlab.ipirangacloud.com.crt
      # KONG_SSL_CERT_KEY: /certificado-ipp/gitlab.ipirangacloud.com.key
      # KONG_ADMIN_SSL_CERT: /certificado-ipp/gitlab.ipirangacloud.com.crt
      # KONG_ADMIN_SSL_CERT_KEY: /certs/gitlab.ipirangacloud.com.key
      # KONG_PLUGINS: bundled,amqp
      KONG_MIGRATE: 'yes'
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_PASSWORD: kong
      POSTGRES_HOST_AUTH_METHOD: trust
      ASSET: ce
    networks:
      - kong-net
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      - "8443:8443/tcp"
      - "8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    
  konga-prepare:
    container_name: konga-prepare
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://kong:kong@db:5432/konga_db"
    restart: on-failure
    networks:
      - kong-net

  konga:
    container_name: konga
    image: pantsel/konga:latest
    restart: always
    environment:
      DB_ADAPTER: postgres
      DB_HOST: db
      DB_USER: kong
      DB_PASSWORD: kong
      TOKEN_SECRET: ahfdjgjgf79JKLFHJKh978953kgdfjkl
      DB_DATABASE: konga_db
      NODE_ENV: production
    networks:
      - kong-net
    ports:
      - "1337:1337"